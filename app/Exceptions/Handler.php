<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Http\Response;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    public function report(Throwable $e)
    {
        return parent::report($e); // TODO: Change the autogenerated stub
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof ModelNotFoundException) {
            return response()->json([
                'success'   => false,
                'message'   => 'Object Not Found'
            ], Response::HTTP_FOUND);
        }

        if ($e instanceof AuthorizationException) {
            return response()->json([
                'success'   => false,
                'message'   => 'Access Denied'
            ], Response::HTTP_FORBIDDEN);
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    protected function unauthenticated($request, AuthenticationException $e)
    {
        if ($request->expectsJson() || $request->isJson()) {
            return response()->json(['success'   => false, 'message' => 'Unauthenticated.'], Response::HTTP_UNAUTHORIZED);
        }

        return response()->json([]);

        return parent::unauthenticated($request, $exception); // TODO: Change the autogenerated stub
    }
}
